#summary I18N and L10N support based on GNU gettext

= I18N and L10N support based on GNU gettext =

== Introduction ==
The class GettextResource can read the .mo binary translation file in /usr/share/locale/_lang_/LC_MESSAGES.

You can internationalise strings as with gettext:
{{{
button.setText(_("_Browse for other folders"));
}}}

You can use a wrapper such as [http://code.google.com/p/gtkjfilechooser/source/browse/trunk/GtkJFileChooser/src/eu/kostia/gtkjfilechooser/I18N.java this] and import it as static:
{{{
import static eu.kostia.gtkjfilechooser.I18N.*;
[...]
// Create folder button
createFolderButton = new JButton(_("Create Fo_lder"));
createFolderButton.setMnemonic(getMnemonic("Create Fo_lder"));
}}}

It can also be used for declaring mnemonics.

Here's the general procedure to internationalise applications using the gettext approach:

{{{
$ xgettext -L Java -k -k_ -o keys.pot $(find src/ -name "*.java")
}}}
Create a .pot file, extracting all the strings in the function `_()`. Notes that also concatenated strings across multiple lines like this one
{{{
String text = _("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi ut " +
"mollis neque. Nunc interdum orci non magna suscipit dignissim. Pellentesque nec " +
"ipsum orci, vehicula porttitor massa.");
}}}
will be extracted
Example:
{{{
#: test/eu/kostia/gtkjfilechooser/POTest.java:14
msgid "Hallo, how are you?"
msgstr ""

#: test/eu/kostia/gtkjfilechooser/POTest.java:15
msgid "Fine, thanks!"
msgstr ""

#: test/eu/kostia/gtkjfilechooser/POTest.java:20
msgid ""
"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi ut "
"mollis neque. Nunc interdum orci non magna suscipit dignissim. Pellentesque nec "
"ipsum orci, vehicula porttitor massa."
msgstr ""
}}}

{{{
$ msgmerge it.po keys.pot --output-file=keys.it.po
}}}
The file _it.pot_ contains a bundle of translations for some msgids. The above command merges the translations and saves the result in _keys.it.po_.
The multiple-lines string in the just created _keys.it.po_ will be transformed in a single line string as follows:
{{{
#: test/eu/kostia/gtkjfilechooser/POTest.java:20
msgid "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi ut mollis neque. Nunc interdum orci non magna suscipit dignissim. Pellentesque nec ipsum orci, vehicula porttitor massa."
msgstr ""
}}}
Note that the _.pot_ files contain msgids and emtpy msgstrs, while the ._lang iso_.po files contain the translations.
Output example (if the msgids are already present and traslated in _it.pot_)
{{{
#: test/eu/kostia/gtkjfilechooser/POTest.java:14
msgid "Hallo, how are you?"
msgstr "Ciao, come va?"

#: test/eu/kostia/gtkjfilechooser/POTest.java:15
msgid "Fine, thanks!"
msgstr "Bene, grazie!"
}}}

To translate the remaining msgid you can use GUI tools like poedit.

{{{
$ msgfmt keys.it.pot
}}}
Create the binary .mo file (the one that it's really used in the applications).
Example:
{{{
System.out.printf (_("This program is running as process number %d.\n"), pid);
}}}

The .mo file format is described [http://www.gnu.org/software/hello/manual/gettext/MO-Files.html#MO-Files here]


==!GettextResouse as a command line tool==
!GettextResouse can also be used from the command line:
{{{
$ ./gettextResource 
Usage: gettextResource [-k MSGID] | [-i] FILENAME

Get the translation for the given MSGID or list all
MSGID/MGSSTR pairs when no option is given.

Options:
  -h, --help            Show this help message and exit
  -i, --info            Show the .mo file info
  -k MSGID              Get the associated msgstr


Examples:
  gettextResource -k Search /usr/share/locale/it/LC_MESSAGES/gtk20.mo
  gettextResource /usr/share/locale/it/LC_MESSAGES/gtk20.mo
}}}

For more info refer to the [http://code.google.com/p/gtkjfilechooser/source/browse/trunk/GtkJFileChooser/src/eu/kostia/gtkjfilechooser/GettextResource.java code] and the javadoc.